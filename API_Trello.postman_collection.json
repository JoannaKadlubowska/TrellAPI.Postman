{
	"info": {
		"_postman_id": "3a1cfa71-d1f1-4612-a19b-3f38b74e2e45",
		"name": "API_Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18691733"
	},
	"item": [
		{
			"name": "Create a Board",
			"item": [
				{
					"name": "Create a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let boardName = pm.variables.replaceIn(\"First board \" + _.random(1,30))\r",
									"\r",
									"pm.collectionVariables.set(\"boardName\", boardName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response name is correct\", () =>{\r",
									"    const responseName = pm.variables.get(\"boardName\");\r",
									"    pm.expect(respBody.name).to.eql(responseName)\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"boardId\", respBody.id);\r",
									"pm.collectionVariables.set(\"boardName\", respBody.name)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/?name={{boardName}}&token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const boardName = pm.collectionVariables.get(\"boardName\")\r",
									"\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response name is correct\", () =>{    \r",
									"    pm.expect(respBody.name).to.eql(boardName)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response header is content-type\", () =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify if header Content-Type contain application/json\", () =>{\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add and Delete Member to a Board",
			"item": [
				{
					"name": "Get Actions of a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const boardName = pm.collectionVariables.get(\"boardName\")\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify board name is correct\", () =>{\r",
									"    pm.expect(respBody[0].data.board.name).to.eql(boardName)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify member creator activity status isn't blocked\", () =>{\r",
									"    pm.expect(respBody[0].memberCreator.activityBlocked).to.eql(false)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/actions?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"actions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite Member to Board via email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify full name first member is not equal admin name\", () =>{\r",
									"    pm.expect(respBody.members[0].fullName).to.not.includes(\"Joanna KadÅ‚ubowska\");\r",
									"    pm.collectionVariables.set(\"idNewMember\", respBody.members[0].id);\r",
									"    pm.collectionVariables.set(\"memberName\", respBody.members[0].fullName)\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"fullName\" : \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/members?email={{$randomEmail}}&token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"members"
							],
							"query": [
								{
									"key": "email",
									"value": "{{$randomEmail}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Member to a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const idMember = pm.collectionVariables.get(\"idNewMember\")\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify id member is correct\", () =>{\r",
									"        pm.expect(respBody.members[0].id).to.eql(idMember)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify id member in memberships is correct\", () =>{\r",
									"    pm.expect(respBody.memberships[0].idMember).to.eql(idMember)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify memberType new member is equal normal\", () =>{\r",
									"    pm.expect(respBody.memberships[0].memberType).to.eql(\"normal\")\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify member deactivated status isn't deactivated\", () =>{\r",
									"    pm.expect(respBody.memberships[0].deactivated).to.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/members/{{idNewMember}}?type=normal&token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"members",
								"{{idNewMember}}"
							],
							"query": [
								{
									"key": "type",
									"value": "normal"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Members of a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const idMember = pm.collectionVariables.get(\"idNewMember\");\r",
									"const memberFullName = pm.collectionVariables.get(\"memberName\");\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response is a array\", () =>{\r",
									"    pm.expect(respBody).to.be.an(\"array\");\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response array isn't empty\", () =>{\r",
									"    pm.expect(respBody).is.not.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify name member isn't new member full name\", () =>{\r",
									"    pm.expect(respBody[0].fullName).to.eql(memberFullName)\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/members?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"members"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Member from Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/members/{{idNewMember}}?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"members",
								"{{idNewMember}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Members of a Board Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const idMember = pm.collectionVariables.get(\"idNewMember\");\r",
									"const memberFullName = pm.collectionVariables.get(\"memberName\");\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify id  member is not equal new member\", () =>{\r",
									"    pm.expect(respBody[0].id).to.not.eql(idMember)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify name member isn't new member full name\", () =>{\r",
									"    pm.expect(respBody[0].fullName).to. not.eql(memberFullName)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/members?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"members"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create a new List",
			"item": [
				{
					"name": "Create a new List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let newListName = pm.variables.replaceIn(\"New list \" + _.random(1,30))\r",
									"\r",
									"pm.variables.set(\"newListName\", newListName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const nameList = pm.variables.get(\"newListName\");\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"   pm.expect(pm.response.code).to.eql(200)\r",
									"})\r",
									"pm.test(\"Should verify list name is correct \", () =>{\r",
									"        pm.expect(respBody.name).to.eql(nameList)\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"newListId\", respBody.id)\r",
									"pm.collectionVariables.set(\"newListName\", respBody.name)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newListName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/lists?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List on Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const nameList = pm.collectionVariables.get(\"newListName\");\r",
									"\r",
									"pm.test(\"Should verify name new list is correct\", () =>{\r",
									"    pm.expect(respBody[0].name).to.eql(nameList)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify status for all list is correct\", () =>{\r",
									" respBody.forEach(item=>{\r",
									"        pm.expect(item.status).to.eql(null);\r",
									"      })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/lists?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create a new Card",
			"item": [
				{
					"name": "Create a new Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let newCardName = pm.variables.replaceIn(\"New card \" + _.random(1,10))\r",
									"\r",
									"pm.variables.set(\"newCardName\", newCardName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"CardId\", respBody.id )\r",
									"pm.collectionVariables.set(\"newCardName\", respBody.name)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newCardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}cards?idList={{newListId}}&token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{newListId}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"const newCardName = pm.collectionVariables.get(\"newCardName\");\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify card name\", () =>{\r",
									"    pm.expect(respBody[0].name).to.eql(newCardName)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify card status\", () =>{\r",
									"    pm.expect(respBody[0].closed).to.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}lists/{{newListId}}/cards?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}lists"
							],
							"path": [
								"{{newListId}}",
								"cards"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update a Card",
			"item": [
				{
					"name": "Add a Member to Card",
					"item": [
						{
							"name": "Add a Member to a Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"const idMember = pm.collectionVariables.get(\"idNewMember\")\r",
											"\r",
											"pm.test(\"Should verify response status is 200\", () =>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify id member is correct\", () =>{\r",
											"    pm.expect(respBody[0].id).to.eql(idMember)\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify response is array\", () =>{\r",
											"    pm.expect(respBody).to.be.an(\"array\")\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify response array isn't empty\", () =>{\r",
											"    pm.expect(respBody).is.not.empty;\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}cards/{{CardId}}/idMembers?token={{token}}&key={{key}}&value={{idNewMember}}",
									"host": [
										"{{baseURL}}cards"
									],
									"path": [
										"{{CardId}}",
										"idMembers"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "value",
											"value": "{{idNewMember}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cards the Member is on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"const cardId = pm.collectionVariables.get(\"CardId\");\r",
											"const cardName = pm.collectionVariables.get(\"newCardName\")\r",
											"\r",
											"pm.test(\"Should verify response status is 200\", () =>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify id card\", () =>{\r",
											"    pm.expect(respBody[0].id).to.eql(cardId)\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify name of card\", () => {\r",
											"    pm.expect(respBody[0].name).to.eql(cardName)\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}members/{{idNewMember}}/cards?token={{token}}&key={{key}}",
									"host": [
										"{{baseURL}}members"
									],
									"path": [
										"{{idNewMember}}",
										"cards"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add a Checklist",
					"item": [
						{
							"name": "Create Checklist on a Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Should verify response status is 200\", () =>{\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"checklistId\", respBody.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}cards/{{CardId}}/checklists?token={{token}}&key={{key}}",
									"host": [
										"{{baseURL}}cards"
									],
									"path": [
										"{{CardId}}",
										"checklists"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"const idChecklists = pm.collectionVariables.get(\"checklistId\")\r",
											"\r",
											"pm.test(\"Should verify response status\", () =>{\r",
											"    pm.expect(pm.response.code).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Should verify idChecklists is correct\", () =>{\r",
											"    pm.expect(respBody.idChecklists[0]).to.eql(idChecklists)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}cards/{{CardId}}?token={{token}}&key={{key}}",
									"host": [
										"{{baseURL}}cards"
									],
									"path": [
										"{{CardId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add a new Label",
					"item": [
						{
							"name": "Create a new Label on a Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Should verify response status is 200\", () =>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"newLabelId\", respBody.id)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"color\" : \"{{$randomColor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}cards/{{CardId}}/labels?key={{key}}&token={{token}}",
									"host": [
										"{{baseURL}}cards"
									],
									"path": [
										"{{CardId}}",
										"labels"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Card info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respBody = pm.response.json();\r",
											"const newLabelId = pm.collectionVariables.get(\"newLabelId\")\r",
											"\r",
											"pm.test(\"Should verify response status is 200\", () =>{\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Should verify id new label is correct\", () =>{\r",
											"    pm.expect(respBody[0].labels[0].id).to.eql(newLabelId)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}lists/{{newListId}}/cards?token={{token}}&key={{key}}",
									"host": [
										"{{baseURL}}lists"
									],
									"path": [
										"{{newListId}}",
										"cards"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Archive  Cards in List",
			"item": [
				{
					"name": "Archive all Cards from List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test( \"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response body is empty\", () =>{\r",
									"    pm.expect(respBody).to.include({})\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}lists/{{newListId}}/archiveAllCards?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}lists"
							],
							"path": [
								"{{newListId}}",
								"archiveAllCards"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/lists?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archive a List",
			"item": [
				{
					"name": "Archive  a list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response closed is true\", ()=>{\r",
									"    pm.expect(respBody.closed).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"closed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/lists/{{newListId}}?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"lists",
								"{{newListId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should verify response status is 404\", () =>{\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/lists?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete a Board",
			"item": [
				{
					"name": "Delete a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Should verify response status is 200\", () =>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Should verify response info\", () =>{\r",
									"    pm.expect(respBody._value).to.eql(null)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should verify status code is 404\", () =>{\r",
									"    pm.expect(pm.response.code).to.eql(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?token={{token}}&key={{key}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "boardName",
			"value": ""
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "newListId",
			"value": ""
		},
		{
			"key": "idNewMember",
			"value": ""
		},
		{
			"key": "CardId",
			"value": ""
		},
		{
			"key": "checklistId",
			"value": ""
		},
		{
			"key": "memberName",
			"value": ""
		},
		{
			"key": "newListName",
			"value": ""
		},
		{
			"key": "newCardName",
			"value": ""
		},
		{
			"key": "newLabelId",
			"value": ""
		}
	]
}